plugins {
	id 'org.springframework.boot' version '2.5.7'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'idea'
}

group = 'academy.digitallab.store'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2020.0.4")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'

	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
	implementation ("org.springframework.retry:spring-retry")
	
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-log4j2', version: '2.3.4.RELEASE'
	implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'

	implementation 'org.springframework.cloud:spring-cloud-sleuth-zipkin'

	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'


	//implementation 'org.springframework.cloud:spring-cloud-starter-vault-config'


	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

test {
	useJUnitPlatform()
}

def updateApplicationProperties() {
	def configFile = new File('src/main/resources/application.properties')
	println "updating version to '${version}' in ${configFile}"
	String configContent = configFile.getText('UTF-8')

	configContent = configContent.replaceAll(/application\.projectVersion=.*/, "application.projectVersion=${version}")
	configFile.write(configContent, 'UTF-8')
}
allprojects {
	updateApplicationProperties()
}
bootRun {
	jvmArgs = ["-Dfile.encoding=UTF-8"]
}

configurations.all {
	exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
}
