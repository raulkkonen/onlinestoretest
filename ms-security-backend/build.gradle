plugins {
	id 'org.springframework.boot' version '2.5.9'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'idea'
}

group = 'academy.digitallab.store'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2020.0.5")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
	implementation ("org.springframework.retry:spring-retry")
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	//JWT
	implementation 'com.auth0:java-jwt:3.18.2'

	//REDIS
	implementation('org.springframework.boot:spring-boot-starter-data-redis'){
		exclude group: 'io.lettuce', module: 'lettuce-core'
	}
	implementation('redis.clients:jedis:3.6.0')

	compileOnly 'org.projectlombok:lombok'

	//MYSQL======================================================
	runtimeOnly group: 'mysql', name: 'mysql-connector-java', version: '5.1.49'

	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'

	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-log4j2', version: '2.3.4.RELEASE'
	implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'

	implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.3.2'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}
def updateApplicationProperties() {
	def configFile = new File('src/main/resources/application.properties')
	println "updating version to '${version}' in ${configFile}"
	String configContent = configFile.getText('UTF-8')

	configContent = configContent.replaceAll(/application\.projectVersion=.*/, "application.projectVersion=${version}")
	configFile.write(configContent, 'UTF-8')
}
allprojects {
	updateApplicationProperties()
}
bootRun {
	jvmArgs = ["-Dfile.encoding=UTF-8"]
}
configurations.all {
	exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
}

jar{
    archiveClassifier=''
    enabled = false
}